name: Bug Hunter

on:
  schedule:
    - cron: '0 0 * * 0'  # Weekly bug hunt
  workflow_dispatch:
    inputs:
      focus_area:
        description: 'Area to focus on'
        required: false
        type: choice
        options:
          - memory-leaks
          - race-conditions
          - error-handling
          - edge-cases
          - performance
          - security

permissions:
  contents: read
  issues: write

jobs:
  hunt-bugs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup
      run: |
        npm install -g .
        pip install -q aider-chat

    - name: Memory Leak Detection
      if: github.event.inputs.focus_area == 'memory-leaks' || github.event.inputs.focus_area == ''
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -n "$GITHUB_TOKEN" ]; then
          curl -s "https://models.inference.ai.azure.com/chat/completions" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4o-2024-11-20",
              "messages": [{
                "role": "user",
                "content": "Hunt for memory leaks in claude-yolt:\n\n1. Maps/Sets that grow without cleanup\n2. Event listeners not removed\n3. Closures holding references\n4. Circular references\n5. Stream buffers not released\n6. Process references kept after exit\n\nAnalyze lib/ directory for potential memory leaks. For each leak: file/line, why it leaks, impact, fix suggestion."
              }],
              "temperature": 0.1,
              "max_tokens": 2000
            }' | jq -r '.choices[0].message.content' > bugs-memory.md
        elif [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model deepseek/deepseek-r1:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Hunt for memory leaks: Maps/Sets cleanup, event listeners, closures, streams" \
                lib/ --no-git --yes > bugs-memory.md
        else
          echo "## Memory Leak Detection" > bugs-memory.md
          echo "Analysis skipped - no API key available" >> bugs-memory.md
        fi

    - name: Race Condition Detection
      if: github.event.inputs.focus_area == 'race-conditions' || github.event.inputs.focus_area == ''
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model nousresearch/hermes-3-llama-3.1-405b:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Hunt for race conditions: shared state, async operations, process queue, concurrent Map/Set access" \
                lib/process-interceptor.js lib/hang-detector.js --no-git --yes > bugs-races.md
        elif [ -n "$GITHUB_TOKEN" ]; then
          curl -s "https://models.inference.ai.azure.com/chat/completions" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4o-2024-11-20",
              "messages": [{
                "role": "user",
                "content": "Hunt for race conditions in claude-yolt process management: shared state without locks, async operations on same data, process queue races, event ordering dependencies."
              }],
              "temperature": 0.1,
              "max_tokens": 1500
            }' | jq -r '.choices[0].message.content' > bugs-races.md
        else
          echo "## Race Condition Detection" > bugs-races.md
          echo "Analysis skipped - no API key available" >> bugs-races.md
        fi

    - name: Error Handling Gaps
      if: github.event.inputs.focus_area == 'error-handling' || github.event.inputs.focus_area == ''
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model qwen/qwen-2.5-coder-32b-instruct:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Find error handling gaps: uncaught promises, missing try-catch, error swallowing, missing validation" \
                lib/ --no-git --yes > bugs-errors.md
        elif [ -n "$GITHUB_TOKEN" ]; then
          curl -s "https://models.inference.ai.azure.com/chat/completions" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4o-mini", 
              "messages": [{
                "role": "user",
                "content": "Find error handling gaps in claude-yolt: uncaught promise rejections, missing try-catch blocks, error swallowing, missing error event handlers, inadequate error messages."
              }],
              "temperature": 0.1,
              "max_tokens": 1500
            }' | jq -r '.choices[0].message.content' > bugs-errors.md
        else
          echo "## Error Handling Gaps" > bugs-errors.md
          echo "Analysis skipped - no API key available" >> bugs-errors.md
        fi

    - name: Edge Case Analysis
      if: github.event.inputs.focus_area == 'edge-cases' || github.event.inputs.focus_area == ''
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        if [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model deepseek/deepseek-r1:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Find edge cases: empty inputs, null/undefined, circular deps, unicode filenames, long commands, process limit=0, large stdout, binary output" \
                lib/ --no-git --yes > bugs-edges.md
        else
          echo "## Edge Case Analysis" > bugs-edges.md
          echo "Analysis skipped - no API key available" >> bugs-edges.md
        fi

    - name: Performance Bottlenecks
      if: github.event.inputs.focus_area == 'performance' || github.event.inputs.focus_area == ''
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model nousresearch/hermes-3-llama-3.1-405b:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Find performance bottlenecks: O(n²) algorithms, blocking I/O, large string concat, inefficient data structures, missing caches" \
                lib/ --no-git --yes > bugs-performance.md
        elif [ -n "$GITHUB_TOKEN" ]; then
          curl -s "https://models.inference.ai.azure.com/chat/completions" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4o-2024-11-20",
              "messages": [{
                "role": "user", 
                "content": "Find performance bottlenecks in claude-yolt: O(n²) algorithms, blocking I/O in hot paths, inefficient data structures, repeated calculations, missing caches."
              }],
              "temperature": 0.1,
              "max_tokens": 1500
            }' | jq -r '.choices[0].message.content' > bugs-performance.md
        else
          echo "## Performance Bottlenecks" > bugs-performance.md
          echo "Analysis skipped - no API key available" >> bugs-performance.md
        fi

    - name: Security Vulnerabilities
      if: github.event.inputs.focus_area == 'security' || github.event.inputs.focus_area == ''
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -n "$GITHUB_TOKEN" ]; then
          curl -s "https://models.inference.ai.azure.com/chat/completions" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4o-2024-11-20",
              "messages": [{
                "role": "user",
                "content": "Find security issues beyond intentional bypass in claude-yolt: command injection in spawn calls, path traversal, prototype pollution, RegEx DoS, unvalidated input, resource exhaustion vectors."
              }],
              "temperature": 0.1,
              "max_tokens": 1500
            }' | jq -r '.choices[0].message.content' > bugs-security.md
        elif [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model deepseek/deepseek-r1:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Find security vulnerabilities: command injection, path traversal, prototype pollution, input validation issues" \
                lib/ --no-git --yes > bugs-security.md
        else
          echo "## Security Vulnerabilities" > bugs-security.md
          echo "Analysis skipped - no API key available" >> bugs-security.md
        fi

    - name: Compile Bug Report
      run: |
        echo "# 🐛 Bug Hunt Report - $(date +%Y-%m-%d)" > bug-report.md
        echo "" >> bug-report.md
        echo "Focus area: ${{ github.event.inputs.focus_area || 'all' }}" >> bug-report.md
        echo "" >> bug-report.md
        
        # Add all findings
        for report in bugs-*.md; do
          if [ -f "$report" ]; then
            echo "## ${report#bugs-}" >> bug-report.md
            cat "$report" >> bug-report.md
            echo "" >> bug-report.md
          fi
        done
        
        # Count issues found
        ISSUE_COUNT=$(grep -c "File and line\|Where it could occur\|Scenario that triggers" bug-report.md || echo "0")
        echo "Total potential issues found: $ISSUE_COUNT" >> bug-report.md

    - name: Grok-3 Creative Bug Analysis
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        echo "" >> bug-report.md
        echo "## 🚀 Grok-3 Creative Bug Analysis" >> bug-report.md
        
        if [ -n "$OPENROUTER_API_KEY" ]; then
          # Try Grok-3 for creative and unconventional bug detection
          curl -s "https://openrouter.ai/api/v1/chat/completions" \
            -H "Authorization: Bearer $OPENROUTER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "x-ai/grok-beta",
              "messages": [{
                "role": "user",
                "content": "As Grok, analyze claude-yolt for weird, creative, and unconventional bugs that other models might miss:\n\n1. **Timing-dependent bugs**: Race conditions in unusual scenarios\n2. **Platform-specific issues**: OS-dependent edge cases\n3. **Process archaeology**: Zombie processes, orphans, handle leaks\n4. **Chaos engineering**: What happens under extreme load/failures?\n5. **Human factors**: UX bugs, confusing behaviors, foot-guns\n6. **Emergent behaviors**: Unexpected interactions between components\n\nBe creative and think outside the box. What could go hilariously wrong?"
              }],
              "temperature": 0.7,
              "max_tokens": 1500
            }' | jq -r '.choices[0].message.content' >> bug-report.md 2>/dev/null || {
              echo "Grok-3 not available, using creative analysis fallback..." >> bug-report.md
              aider --model mistralai/mistral-large-2411:free \
                    --openrouter-api-key "$OPENROUTER_API_KEY" \
                    --message "Think creatively about unusual bugs: timing issues, platform-specific problems, chaos scenarios, UX problems, emergent behaviors" \
                    --no-git --yes >> bug-report.md
            }
        else
          echo "Creative analysis skipped - no API key available" >> bug-report.md
        fi

    - name: Create Bug Issues
      run: |
        # Create individual issues for critical bugs
        if grep -q "Command injection\|Memory leak\|Race condition" bug-report.md; then
          gh issue create --title "🐛 Bug Hunt: Critical issues found" \
            --body "$(cat bug-report.md)" \
            --label "bug,security,urgent" \
            --assignee "${{ github.repository_owner }}"
        else
          gh issue create --title "🐛 Bug Hunt Report - $(date +%B %d)" \
            --body "$(cat bug-report.md)" \
            --label "bug,enhancement"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Bug Report
      uses: actions/upload-artifact@v4
      with:
        name: bug-hunt-${{ github.run_id }}
        path: |
          bug-report.md
          bugs-*.md