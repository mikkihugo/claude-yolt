name: Architecture & Design Review

on:
  pull_request:
    types: [opened, reopened]
    paths:
      - 'lib/**'
      - 'bin/**'
      - 'package.json'
  schedule:
    - cron: '0 0 1 * *'  # Monthly architecture review
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  architecture-review:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Environment
      run: |
        npm ci || npm install
        npm install -g .
        pip install -q aider-chat

    - name: Architecture Analysis
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Use GitHub Models API or OpenRouter free models
        if [ -n "$GITHUB_TOKEN" ]; then
          echo "Using GitHub Models API (free)"
          MODEL_URL="https://models.inference.ai.azure.com/chat/completions"
          MODEL_NAME="gpt-4o-2024-11-20"
          AUTH_HEADER="Authorization: Bearer $GITHUB_TOKEN"
        elif [ -n "$OPENROUTER_API_KEY" ]; then
          echo "Using OpenRouter free models"
          MODEL_URL="https://openrouter.ai/api/v1/chat/completions"
          MODEL_NAME="nousresearch/hermes-3-llama-3.1-405b:free"
          AUTH_HEADER="Authorization: Bearer $OPENROUTER_API_KEY"
        else
          echo "Fallback to aider with free models"
          aider --model qwen/qwen-2.5-coder-32b-instruct:free \
                --message "Analyze claude-yolt architecture" \
                lib/ --no-git --yes > architecture-report.md 2>&1
          exit 0
        fi
        
        # Generate architecture overview using free AI models
        curl -s "$MODEL_URL" \
          -H "$AUTH_HEADER" \
          -H "Content-Type: application/json" \
          -d '{
            "model": "'$MODEL_NAME'",
            "messages": [{
              "role": "user",
              "content": "Analyze the architecture of claude-yolt:
        
        1. Component relationships and dependencies
        2. Design patterns used
        3. Potential architectural improvements
        4. Security architecture review
        5. Scalability concerns
        6. Code coupling and cohesion
        
        Focus on:
        - Process interception design
        - Stream handling architecture
        - Queue management patterns
        - Error handling strategies
        
        Be specific about file locations and line numbers."
            }],
            "temperature": 0.1,
            "max_tokens": 2000
          }' | jq -r '.choices[0].message.content' > architecture-report.md

    - name: Design Patterns Review
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -n "$GITHUB_TOKEN" ]; then
          MODEL_URL="https://models.inference.ai.azure.com/chat/completions"
          MODEL_NAME="gpt-4o-2024-11-20"
          AUTH_HEADER="Authorization: Bearer $GITHUB_TOKEN"
        else
          MODEL_URL="https://openrouter.ai/api/v1/chat/completions"
          MODEL_NAME="qwen/qwen-2.5-coder-32b-instruct:free"
          AUTH_HEADER="Authorization: Bearer $OPENROUTER_API_KEY"
        fi
        
        curl -s "$MODEL_URL" \
          -H "$AUTH_HEADER" \
          -H "Content-Type: application/json" \
          -d '{
            "model": "'$MODEL_NAME'",
            "messages": [{
              "role": "user",
              "content": "Review design patterns in claude-yolt:\n\n1. Identify current patterns (Observer, Factory, Singleton, etc.)\n2. Suggest missing patterns that could improve the code\n3. Anti-patterns to refactor\n4. SOLID principles compliance\n5. DRY violations\n\nReview files: lib/"
            }],
            "temperature": 0.1,
            "max_tokens": 1500
          }' | jq -r '.choices[0].message.content' >> architecture-report.md

    - name: Dependency Analysis
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Use aider for dependency analysis (fallback to free models)
        if [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model deepseek/deepseek-r1:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Analyze package.json dependencies for security risks, unused deps, and better alternatives" \
                package.json --no-git --yes >> architecture-report.md
        else
          echo "## Dependency Analysis" >> architecture-report.md
          echo "OpenRouter API key not available for dependency analysis" >> architecture-report.md
          npm audit --audit-level=moderate >> architecture-report.md 2>&1 || true
        fi

    - name: Performance Architecture
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        if [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model nousresearch/hermes-3-llama-3.1-405b:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Analyze performance architecture: bottlenecks, memory leaks, stream efficiency, event patterns" \
                lib/process-interceptor.js --no-git --yes >> architecture-report.md
        else
          echo "## Performance Architecture" >> architecture-report.md
          echo "Analysis skipped - no API key available" >> architecture-report.md
        fi

    - name: Create Architecture Issue
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      run: |
        gh issue create --title "Monthly Architecture Review - $(date +%B)" \
          --body "$(cat architecture-report.md)" \
          --label "architecture,enhancement"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      run: |
        gh pr comment ${{ github.event.pull_request.number }} \
          --body "## 🏗️ Architecture Review
          
          $(cat architecture-report.md | head -1000)
          
          ---
          *Full report attached as artifact*"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Report
      uses: actions/upload-artifact@v4
      with:
        name: architecture-review-${{ github.sha }}
        path: architecture-report.md

  code-quality-review:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup
      run: |
        npm install -g .
        pip install -q aider-chat

    - name: Code Smell Detection
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        if [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model qwen/qwen-2.5-coder-32b-instruct:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Detect code smells in claude-yolt:
        
        1. Long methods (>50 lines)
        2. Deep nesting (>3 levels)
        3. Magic numbers and strings
        4. Duplicate code blocks
        5. Complex conditionals
        6. Poor naming conventions
        7. Missing error handling
        8. Console.log left in code
        
        Scan all JS files and report specific locations" \
                lib/ --no-git --yes > code-quality.md
        else
          echo "## Code Smell Detection" > code-quality.md
          echo "Analysis skipped - no API key available" >> code-quality.md
        fi

    - name: Refactoring Suggestions
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        if [ -n "$OPENROUTER_API_KEY" ]; then
          # Get most complex file
          COMPLEX_FILE=$(find lib -name '*.js' -exec wc -l {} \; | sort -rn | head -1 | awk '{print $2}')
          
          aider --model mistralai/codestral-2405:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Suggest refactoring: extract methods, reduce complexity, improve readability, add JSDoc" \
                "$COMPLEX_FILE" --no-git --yes >> code-quality.md
        else
          echo "## Refactoring Suggestions" >> code-quality.md
          echo "Analysis skipped - no API key available" >> code-quality.md
        fi

    - name: Test Coverage Analysis
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        if [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model deepseek/deepseek-r1:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Analyze test coverage needs: missing test cases, edge cases, integration tests, performance tests" \
                test.js lib/ --no-git --yes >> code-quality.md
        else
          echo "## Test Coverage Analysis" >> code-quality.md
          echo "Analysis skipped - no API key available" >> code-quality.md
        fi

    - name: Create Quality Report
      if: github.event_name == 'schedule'
      run: |
        gh issue create --title "Code Quality Report - $(date +%Y-%m-%d)" \
          --body "$(cat code-quality.md)" \
          --label "code-quality,technical-debt"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-architecture:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup
      run: |
        npm install -g .
        pip install -q aider-chat

    - name: Security Architecture Review
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        # Use claude-yolt for security analysis if available (dogfooding our own tool)
        if [ -n "$ANTHROPIC_API_KEY" ]; then
          mkdir -p ~/.config/@anthropic-ai/claude-code
          echo "{\"apiKey\": \"$ANTHROPIC_API_KEY\"}" > ~/.config/@anthropic-ai/claude-code/config.json
          echo "Using claude-yolt for security architecture review..."
          
          claude-yolt "Comprehensive security review of claude-yolt:
          
          1. Permission bypass implications
          2. Process injection risks
          3. Command injection vulnerabilities
          4. Path traversal risks
          5. Resource exhaustion attacks
          6. Privilege escalation paths
          7. Supply chain risks
          
          This tool bypasses security by design - focus on:
          - Unintended escalations
          - Additional attack vectors
          - Mitigation strategies
          
          Be thorough and specific about file locations and line numbers." > security-architecture.md 2>&1
        elif [ -n "$GITHUB_TOKEN" ]; then
          curl -s "https://models.inference.ai.azure.com/chat/completions" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4o-2024-11-20",
              "messages": [{
                "role": "user",
                "content": "Comprehensive security review of claude-yolt:
        
        1. Permission bypass implications
        2. Process injection risks
        3. Command injection vulnerabilities
        4. Path traversal risks
        5. Resource exhaustion attacks
        6. Privilege escalation paths
        7. Supply chain risks
        
        This tool bypasses security by design - focus on:
        - Unintended escalations
        - Additional attack vectors
        - Mitigation strategies"
              }],
              "temperature": 0.1,
              "max_tokens": 2000
            }' | jq -r '.choices[0].message.content' > security-architecture.md
        elif [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model deepseek/deepseek-r1:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Security review: permission bypass, injection risks, attack vectors" \
                lib/ --no-git --yes > security-architecture.md
        else
          echo "## Security Architecture Review" > security-architecture.md
          echo "Analysis skipped - no API key available" >> security-architecture.md
        fi

    - name: Threat Modeling
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        if [ -n "$OPENROUTER_API_KEY" ]; then
          aider --model nousresearch/hermes-3-llama-3.1-405b:free \
                --openrouter-api-key "$OPENROUTER_API_KEY" \
                --message "Create threat model: malicious users, compromised deps, API attacks, process limits" \
                lib/ --no-git --yes >> security-architecture.md
        else
          echo "## Threat Modeling" >> security-architecture.md
          echo "Analysis skipped - no API key available" >> security-architecture.md
        fi

    - name: Create Security Report
      if: contains(fromJSON('["schedule", "workflow_dispatch"]'), github.event_name)
      run: |
        gh issue create --title "Security Architecture Review - $(date +%Y-%m)" \
          --body "$(cat security-architecture.md)" \
          --label "security,architecture" \
          --assignee "${{ github.repository_owner }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}