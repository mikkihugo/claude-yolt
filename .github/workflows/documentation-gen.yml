name: Documentation Generation

on:
  push:
    branches: [main]
    paths:
      - 'lib/**'
      - 'bin/**'
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to document'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - process-interceptor
          - stream-handler
          - hang-detector
          - safety
          - auth-manager

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup
      run: |
        npm install -g .
        mkdir -p ~/.config/@anthropic-ai/claude-code
        echo "{\"apiKey\": \"${{ secrets.ANTHROPIC_API_KEY }}\"}" > ~/.config/@anthropic-ai/claude-code/config.json

    - name: Generate API Documentation
      env:
        CLAUDE_MAX_PROCESSES: "25"
      run: |
        mkdir -p docs
        
        # Component to document
        COMPONENT="${{ github.event.inputs.component || 'all' }}"
        
        if [ "$COMPONENT" == "all" ]; then
          FILES=$(find lib -name '*.js' | grep -v test)
        else
          FILES="lib/${COMPONENT}.js"
        fi
        
        for file in $FILES; do
          echo "Documenting $file..."
          filename=$(basename $file .js)
          
          claude-yolt "Generate comprehensive API documentation for $file:
          
          1. Module overview and purpose
          2. All exported functions with:
             - Parameters and types
             - Return values
             - Usage examples
             - Error conditions
          3. Internal architecture
          4. Configuration options
          5. Event emissions
          6. Integration guide
          
          Format as markdown with code examples.
          
          Code:
          $(cat $file)" > "docs/api-${filename}.md" 2>&1
        done

    - name: Generate Architecture Diagrams
      run: |
        claude-yolt "Create Mermaid diagrams for claude-yolt architecture:
        
        1. Component relationship diagram
        2. Process flow diagram
        3. Event flow diagram
        4. Data flow diagram
        
        Show how these components interact:
        - Main entry (bin/claude-yolt)
        - Process interceptor
        - Stream handler
        - Hang detector
        - Queue system
        
        Output valid Mermaid syntax" > docs/architecture-diagrams.md 2>&1

    - name: Generate Integration Guide
      run: |
        claude-yolt "Create integration guide for claude-yolt:
        
        1. Installation methods (npm, git, docker)
        2. Configuration guide
        3. Environment variables
        4. Common use cases with examples
        5. Troubleshooting guide
        6. Performance tuning
        7. Security considerations
        
        Include code examples for:
        - Basic usage
        - Process limit configuration
        - CI/CD integration
        - Docker usage" > docs/integration-guide.md 2>&1

    - name: Generate FAQ
      run: |
        claude-yolt "Generate FAQ for claude-yolt based on the codebase:
        
        Common questions about:
        1. Why processes hang in Claude
        2. How the interceptor works
        3. Safety of bypassing permissions
        4. Process limit configuration
        5. Debugging issues
        6. Performance impact
        7. Compatibility
        
        Review issues and code comments for real questions" > docs/FAQ.md 2>&1

    - name: Create Documentation PR
      run: |
        # Check if docs changed
        if git diff --quiet docs/; then
          echo "No documentation changes"
          exit 0
        fi
        
        # Create branch and PR
        BRANCH="docs/auto-update-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $BRANCH
        git add docs/
        git commit -m "ðŸ“š Auto-generate documentation
        
        Generated documentation for:
        - API references
        - Architecture diagrams
        - Integration guide
        - FAQ
        
        Generated by claude-yolt"
        
        git push origin $BRANCH
        
        gh pr create \
          --title "ðŸ“š Documentation Update" \
          --body "## Auto-generated Documentation
          
          This PR updates documentation using claude-yolt.
          
          ### Files updated:
          \`\`\`
          $(git diff --name-only origin/main)
          \`\`\`
          
          ### Generated for:
          - Component: ${{ github.event.inputs.component || 'all' }}
          - Trigger: ${{ github.event_name }}
          
          Please review the generated documentation for accuracy." \
          --label "documentation"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  readme-suggestions:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4

    - name: Setup
      run: |
        npm install -g .
        mkdir -p ~/.config/@anthropic-ai/claude-code
        echo "{\"apiKey\": \"${{ secrets.ANTHROPIC_API_KEY }}\"}" > ~/.config/@anthropic-ai/claude-code/config.json

    - name: README Improvements
      run: |
        claude-yolt "Suggest improvements for README.md:
        
        Current README:
        $(cat README.md)
        
        Suggest:
        1. Missing sections
        2. Clarity improvements
        3. Better examples
        4. Visual improvements (badges, diagrams)
        5. SEO optimization
        6. User journey optimization
        
        Keep the same warning tone about security" > readme-suggestions.md 2>&1
        
        # Create issue with suggestions
        gh issue create --title "README Improvement Suggestions" \
          --body "$(cat readme-suggestions.md)" \
          --label "documentation,enhancement"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}