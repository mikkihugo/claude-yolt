name: Test claude-yolt Features

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  test-auth-bypass:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install claude-yolt
      run: npm install -g .
    
    - name: Test Without Any Auth
      run: |
        echo "🧪 Testing if claude-yolt works without auth..."
        
        # Try to run without any config
        rm -rf ~/.config/@anthropic-ai/claude-code
        
        # Test basic command
        timeout 30 claude-yolt "echo 'Hello from YOLT'" 2>&1 | tee no-auth-test.log || {
          exit_code=$?
          echo "Exit code: $exit_code"
          
          if grep -q "Hello from YOLT" no-auth-test.log; then
            echo "✅ YOLT mode worked without auth!"
          else
            echo "❌ YOLT mode requires auth"
          fi
        }

  test-process-limits:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        max_processes: [5, 10, 20]
        delay: [50, 100, 200]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install claude-yolt
      run: npm install -g .
    
    - name: Test Limits ${{ matrix.max_processes }}/${{ matrix.delay }}ms
      env:
        CLAUDE_MAX_PROCESSES: ${{ matrix.max_processes }}
        CLAUDE_PROCESS_DELAY: ${{ matrix.delay }}
      run: |
        echo "🧪 Testing with MAX=${{ matrix.max_processes }}, DELAY=${{ matrix.delay }}ms"
        
        # Create a test that spawns many processes
        cat > process-test.js << 'EOF'
        console.log("Attempting to spawn many processes...");
        for (let i = 0; i < 50; i++) {
          require('child_process').spawn('echo', [`test-${i}`]);
        }
        EOF
        
        # Run with claude-yolt wrapper
        timeout 30 node --require ./lib/process-interceptor.js process-test.js 2>&1 | tee test-output.log || true
        
        # Count queue messages
        queue_count=$(grep -c "Queueing process" test-output.log || echo "0")
        echo "Processes queued: $queue_count"
        
        # Verify limits worked
        if [ "$queue_count" -gt 0 ]; then
          echo "✅ Process limiting is working!"
        else
          echo "⚠️ No processes were queued"
        fi

  test-hang-detection:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install claude-yolt
      run: npm install -g .
    
    - name: Test Hang Detection
      run: |
        echo "🧪 Testing hang detection..."
        
        # Create a hanging process
        cat > hang-test.js << 'EOF'
        const { spawn } = require('child_process');
        
        // Spawn a process that hangs
        const proc = spawn('sh', ['-c', 'sleep 300']);
        console.log(`Spawned hanging process: ${proc.pid}`);
        
        // Keep node running
        setTimeout(() => {}, 60000);
        EOF
        
        # Run with hang detection
        timeout 30 node --require ./lib/process-interceptor.js hang-test.js 2>&1 | tee hang-test.log &
        TEST_PID=$!
        
        # Wait and check if hang was detected
        sleep 15
        
        if grep -q "Killing hung process" hang-test.log; then
          echo "✅ Hang detection worked!"
        else
          echo "⚠️ Hang not detected yet"
        fi
        
        kill $TEST_PID 2>/dev/null || true

  test-stream-handling:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install claude-yolt
      run: npm install -g .
    
    - name: Test Stream Handling
      run: |
        echo "🧪 Testing stream handling..."
        
        # Create a process that outputs a lot
        cat > stream-test.js << 'EOF'
        const { spawn } = require('child_process');
        
        // Spawn process with large output
        const proc = spawn('sh', ['-c', 'for i in $(seq 1 10000); do echo "Line $i"; done']);
        
        let lines = 0;
        proc.stdout.on('data', () => lines++);
        proc.on('close', () => {
          console.log(`Received ${lines} chunks of data`);
        });
        EOF
        
        # Run with stream handling
        timeout 10 node --require ./lib/process-interceptor.js stream-test.js 2>&1 | tee stream-test.log
        
        if grep -q "Received.*chunks" stream-test.log; then
          echo "✅ Stream handling worked!"
        else
          echo "❌ Stream handling issue"
        fi

  create-summary:
    needs: [test-auth-bypass, test-process-limits, test-hang-detection, test-stream-handling]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Create Test Summary
      run: |
        echo "# claude-yolt Test Summary" > summary.md
        echo "" >> summary.md
        echo "Date: $(date)" >> summary.md
        echo "" >> summary.md
        
        echo "## Test Results" >> summary.md
        echo "- Auth Bypass: Check workflow results" >> summary.md
        echo "- Process Limits: Tested with multiple configurations" >> summary.md
        echo "- Hang Detection: Verified killer works" >> summary.md
        echo "- Stream Handling: Tested large output handling" >> summary.md
        
        # Create issue
        gh issue create --title "🧪 claude-yolt Test Results - $(date +%Y-%m-%d)" \
          --body "$(cat summary.md)" \
          --label "testing"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}